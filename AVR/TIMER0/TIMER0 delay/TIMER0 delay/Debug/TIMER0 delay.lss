
TIMER0 delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b3  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020b  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_10>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 00 	call	0x88	; 0x88 <main>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer0_Overflow_Init>:

void Timer0_PWM (float duty_cycle)
{
	Timer0_PWM_Init();
	OCR0 = ceil(duty_cycle/100.0 * 255);           //  duty_cycle = x %
}
  7c:	12 be       	out	0x32, r1	; 50
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	83 bf       	out	0x33, r24	; 51
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8c bf       	out	0x3c, r24	; 60
  86:	08 95       	ret

00000088 <main>:


int main(void)
{
	DDRA = 0xFF;              // LEDs OUTPUT
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;             // LEDs OUTPUT
  8c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB0);  // SWITCH
  8e:	b8 98       	cbi	0x17, 0	; 23
	
	sei();                      // Enable Global interrupts
  90:	78 94       	sei
	TIMSK |= (1 << TOIE0);     // Enable Timer0 overflow interrupt 
  92:	89 b7       	in	r24, 0x39	; 57
  94:	81 60       	ori	r24, 0x01	; 1
  96:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << OCIE0);    // Enable Timer0 compare interrupt
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	89 bf       	out	0x39, r24	; 57
	
	 Timer0_Overflow_Init();
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Overflow_Init>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x1a>

000000a4 <__vector_11>:
	
}
/*************************************************** T I M E R 0 *********************************************/
// to do a periodic task
ISR(TIMER0_OVF_vect)             
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	++timer0_Overflow_Count;
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (timer0_Overflow_Count >= 31)   // 1sec / 32.64ms = 31 counts
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ce:	4f 97       	sbiw	r24, 0x1f	; 31
  d0:	88 f0       	brcs	.+34     	; 0xf4 <__vector_11+0x50>
	{
		PORTA ^= (1 << PINA0);
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f e7       	ldi	r18, 0x7F	; 127
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_11+0x3c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_11+0x46>
  ea:	00 00       	nop
		_delay_ms(50);
		timer0_Overflow_Count = 0;
  ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
// 		PORTA ^= (1 << PINA1);
// 		_delay_ms(60);
// 		timer0_Compare_Count = 0;
// 	}
	
}
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
