
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000598  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000519  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e0  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer1_PWM>:
#include <avr/io.h>
#include <util/delay.h>

void Timer1_PWM(void)
{
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);                      // fast PWM mode @10-bit
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	88 60       	ori	r24, 0x08	; 8
  76:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1)| (1<<COM1B1);	      // Non-inverted mode
  78:	8f b5       	in	r24, 0x2f	; 47
  7a:	80 6a       	ori	r24, 0xA0	; 160
  7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS12);                      // Start with No Prescaler
  7e:	8e b5       	in	r24, 0x2e	; 46
  80:	84 60       	ori	r24, 0x04	; 4
  82:	8e bd       	out	0x2e, r24	; 46
	DDRB   |= (1<<PIND4)|(1<<PIND5);	         // OCR1A,OCR1B PIN is OUTPUT
  84:	87 b3       	in	r24, 0x17	; 23
  86:	80 63       	ori	r24, 0x30	; 48
  88:	87 bb       	out	0x17, r24	; 23
  8a:	08 95       	ret

0000008c <main>:
}


int main(void)
{
	OCR1A = (50/100.0 * 1024) - 1;   
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	9b bd       	out	0x2b, r25	; 43
  92:	8a bd       	out	0x2a, r24	; 42
	OCR1B = (80/100.0 * 1024) - 1;  
  94:	82 e3       	ldi	r24, 0x32	; 50
  96:	93 e0       	ldi	r25, 0x03	; 3
  98:	99 bd       	out	0x29, r25	; 41
  9a:	88 bd       	out	0x28, r24	; 40
	Timer1_PWM ();
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <Timer1_PWM>
	
	// Generate 25% Duty Cycle on OCR1A and 75% on OCR1B Pins
}
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
