
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8TWI_Initv>:
char TWI_Read()
{
	TWCR |= 1<<TWINT ;   //clear TWI Interrupt Flag
	while( (TWCR & 1<<TWINT) ==0);  //delay till current job has finished
	return TWDR;
}
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	80 b9       	out	0x00, r24	; 0
  70:	86 b7       	in	r24, 0x36	; 54
  72:	84 60       	ori	r24, 0x04	; 4
  74:	86 bf       	out	0x36, r24	; 54
  76:	08 95       	ret

00000078 <_Z9TWI_Startc>:
  78:	96 b7       	in	r25, 0x36	; 54
  7a:	90 6a       	ori	r25, 0xA0	; 160
  7c:	96 bf       	out	0x36, r25	; 54
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <_Z9TWI_Startc+0x6>
  84:	83 b9       	out	0x03, r24	; 3
  86:	86 b7       	in	r24, 0x36	; 54
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	08 95       	ret

0000008e <_Z8TWI_Stopv>:
  8e:	86 b7       	in	r24, 0x36	; 54
  90:	80 69       	ori	r24, 0x90	; 144
  92:	86 bf       	out	0x36, r24	; 54
  94:	06 b6       	in	r0, 0x36	; 54
  96:	04 fe       	sbrs	r0, 4
  98:	fd cf       	rjmp	.-6      	; 0x94 <_Z8TWI_Stopv+0x6>
  9a:	08 95       	ret

0000009c <_Z9TWI_Writec>:
  9c:	e7 ec       	ldi	r30, 0xC7	; 199
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <_Z9TWI_Writec+0x4>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_Z9TWI_Writec+0xa>
  a6:	00 00       	nop
  a8:	83 b9       	out	0x03, r24	; 3
  aa:	86 b7       	in	r24, 0x36	; 54
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <_Z9TWI_Writec+0x14>
  b6:	08 95       	ret

000000b8 <main>:


int main(void)
{
	
	TWI_Init();
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8TWI_Initv>
	

	//Sending data
	TWI_Start(EEPROM_address_Write); //EEPROM Address with W-bit
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 3c 00 	call	0x78	; 0x78 <_Z9TWI_Startc>
	TWI_Write(0X00); //Memory location in EEPROM
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z9TWI_Writec>
	TWI_Write(0XAA); //Send data
  c8:	8a ea       	ldi	r24, 0xAA	; 170
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z9TWI_Writec>
	TWI_Stop();
  ce:	0e 94 47 00 	call	0x8e	; 0x8e <_Z8TWI_Stopv>
	
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
