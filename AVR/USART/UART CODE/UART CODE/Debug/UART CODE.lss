
UART CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068e  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  000010df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000125  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  7a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z10USART_initli>:

unsigned char Recieve()
{
	while ((UCSRA & (1 << RXC)) == 0);	// Wait until buffer is empty 
	return(UDR);						// Return the byte
}
  82:	45 2b       	or	r20, r21
  84:	01 f5       	brne	.+64     	; 0xc6 <_Z10USART_initli+0x44>
  86:	dc 01       	movw	r26, r24
  88:	cb 01       	movw	r24, r22
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	aa 1f       	adc	r26, r26
  90:	bb 1f       	adc	r27, r27
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	aa 1f       	adc	r26, r26
  98:	bb 1f       	adc	r27, r27
  9a:	9c 01       	movw	r18, r24
  9c:	ad 01       	movw	r20, r26
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	44 1f       	adc	r20, r20
  a4:	55 1f       	adc	r21, r21
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	44 1f       	adc	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	72 e1       	ldi	r23, 0x12	; 18
  b2:	8a e7       	ldi	r24, 0x7A	; 122
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 b6 00 	call	0x16c	; 0x16c <__udivmodsi4>
  ba:	da 01       	movw	r26, r20
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	a1 09       	sbc	r26, r1
  c2:	b1 09       	sbc	r27, r1
  c4:	14 c0       	rjmp	.+40     	; 0xee <_Z10USART_initli+0x6c>
  c6:	20 b5       	in	r18, 0x20	; 32
  c8:	20 64       	ori	r18, 0x40	; 64
  ca:	20 bd       	out	0x20, r18	; 32
  cc:	9b 01       	movw	r18, r22
  ce:	ac 01       	movw	r20, r24
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	44 1f       	adc	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	72 e1       	ldi	r23, 0x12	; 18
  dc:	8a e7       	ldi	r24, 0x7A	; 122
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 b6 00 	call	0x16c	; 0x16c <__udivmodsi4>
  e4:	da 01       	movw	r26, r20
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	a1 09       	sbc	r26, r1
  ec:	b1 09       	sbc	r27, r1
  ee:	89 b9       	out	0x09, r24	; 9
  f0:	89 2f       	mov	r24, r25
  f2:	9a 2f       	mov	r25, r26
  f4:	ab 2f       	mov	r26, r27
  f6:	bb 27       	eor	r27, r27
  f8:	a7 fd       	sbrc	r26, 7
  fa:	ba 95       	dec	r27
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	80 b5       	in	r24, 0x20	; 32
 100:	86 68       	ori	r24, 0x86	; 134
 102:	80 bd       	out	0x20, r24	; 32
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	88 61       	ori	r24, 0x18	; 24
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	08 95       	ret

0000010c <_Z8Transmitc>:
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <_Z8Transmitc>
 110:	8c b9       	out	0x0c, r24	; 12
 112:	08 95       	ret

00000114 <_Z15Transmit_StringPc>:
 [returns]:          Data received from transmitter
 ******************************************************************************/


void Transmit_String(char *str)
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i]!= '0')					// Send string till null
 11c:	80 81       	ld	r24, Z
 11e:	80 33       	cpi	r24, 0x30	; 48
 120:	59 f0       	breq	.+22     	; 0x138 <_Z15Transmit_StringPc+0x24>
 122:	8f 01       	movw	r16, r30
 124:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Transmit(str[i]);
 126:	0e 94 86 00 	call	0x10c	; 0x10c <_Z8Transmitc>
		++i;
 12a:	cf 5f       	subi	r28, 0xFF	; 255


void Transmit_String(char *str)
{
	unsigned char i = 0;
	while (str[i]!= '0')					// Send string till null
 12c:	f8 01       	movw	r30, r16
 12e:	ec 0f       	add	r30, r28
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	80 33       	cpi	r24, 0x30	; 48
 136:	b9 f7       	brne	.-18     	; 0x126 <_Z15Transmit_StringPc+0x12>
	{
		Transmit(str[i]);
		++i;
	}
}
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <main>:



int main(void)
{
	USART_init(9600, 0);	
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	60 e8       	ldi	r22, 0x80	; 128
 146:	75 e2       	ldi	r23, 0x25	; 37
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 41 00 	call	0x82	; 0x82 <_Z10USART_initli>
    while (1) 
    {
		Transmit_String("Test Message!! ");
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8a 00 	call	0x114	; 0x114 <_Z15Transmit_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	89 e6       	ldi	r24, 0x69	; 105
 15c:	98 e1       	ldi	r25, 0x18	; 24
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x1e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x28>
 168:	00 00       	nop
 16a:	f2 cf       	rjmp	.-28     	; 0x150 <main+0x10>

0000016c <__udivmodsi4>:
 16c:	a1 e2       	ldi	r26, 0x21	; 33
 16e:	1a 2e       	mov	r1, r26
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	fd 01       	movw	r30, r26
 176:	0d c0       	rjmp	.+26     	; 0x192 <__udivmodsi4_ep>

00000178 <__udivmodsi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	ee 1f       	adc	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	a2 17       	cp	r26, r18
 182:	b3 07       	cpc	r27, r19
 184:	e4 07       	cpc	r30, r20
 186:	f5 07       	cpc	r31, r21
 188:	20 f0       	brcs	.+8      	; 0x192 <__udivmodsi4_ep>
 18a:	a2 1b       	sub	r26, r18
 18c:	b3 0b       	sbc	r27, r19
 18e:	e4 0b       	sbc	r30, r20
 190:	f5 0b       	sbc	r31, r21

00000192 <__udivmodsi4_ep>:
 192:	66 1f       	adc	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	88 1f       	adc	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	1a 94       	dec	r1
 19c:	69 f7       	brne	.-38     	; 0x178 <__udivmodsi4_loop>
 19e:	60 95       	com	r22
 1a0:	70 95       	com	r23
 1a2:	80 95       	com	r24
 1a4:	90 95       	com	r25
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	bd 01       	movw	r22, r26
 1ac:	cf 01       	movw	r24, r30
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
