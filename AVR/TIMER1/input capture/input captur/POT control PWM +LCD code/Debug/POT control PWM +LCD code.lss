
POT control PWM +LCD code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9b  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000436  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000525  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000657  00000000  00000000  000020c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8En_pulsev>:
/*Clear LCD Screen*/
void LCD_Clear(void)
{
	LCD_Command (0x01);		/* clear display screen */
	_delay_ms(2);
	LCD_Command (0x80);		/* Move cursor to  1st row  1st col */
  6c:	a9 9a       	sbi	0x15, 1	; 21
  6e:	00 00       	nop
  70:	a9 98       	cbi	0x15, 1	; 21
  72:	82 e4       	ldi	r24, 0x42	; 66
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <_Z8En_pulsev+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_Z8En_pulsev+0xe>
  7a:	08 95       	ret

0000007c <_Z11LCD_Commandh>:
  7c:	a8 98       	cbi	0x15, 0	; 21
  7e:	88 bb       	out	0x18, r24	; 24
  80:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8En_pulsev>
  84:	08 95       	ret

00000086 <_Z8LCD_initv>:
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	93 e1       	ldi	r25, 0x13	; 19
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8LCD_initv+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8LCD_initv+0x10>
  96:	00 00       	nop
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11LCD_Commandh>
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11LCD_Commandh>
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11LCD_Commandh>
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11LCD_Commandh>
  b0:	83 ef       	ldi	r24, 0xF3	; 243
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <_Z8LCD_initv+0x2e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_Z8LCD_initv+0x34>
  ba:	00 00       	nop
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11LCD_Commandh>
  c2:	08 95       	ret

000000c4 <_Z8LCD_Charh>:
  c4:	a8 9a       	sbi	0x15, 0	; 21
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8En_pulsev>
  cc:	08 95       	ret

000000ce <_Z11Timer1_Initv>:
#include "LCD.c"
#include <stdlib.h>

void Timer1_Init() //FastPWM_TopOCR1A_Noninverted_Noprescale
{
	TCCR1A = 0;
  ce:	1f bc       	out	0x2f, r1	; 47
	TCNT1=0;
  d0:	1d bc       	out	0x2d, r1	; 45
  d2:	1c bc       	out	0x2c, r1	; 44
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	88 bf       	out	0x38, r24	; 56
	DDRD &= ~(1<<PIND6);
  d8:	8e 98       	cbi	0x11, 6	; 17
  da:	08 95       	ret

000000dc <main>:
}


int main(void)
{
LCD_init();
  dc:	0e 94 43 00 	call	0x86	; 0x86 <_Z8LCD_initv>
Timer1_Init();
  e0:	0e 94 67 00 	call	0xce	; 0xce <_Z11Timer1_Initv>

unsigned int a,b,c,high,period;

LCD_Char('A');
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z8LCD_Charh>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0xe>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
